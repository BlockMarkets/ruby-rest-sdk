=begin
#BlockMarkets Cryptocurrency API

#The BlockMarkets API provides real-time and historical market data on cryptocurrencies from the world's leading crypto exchanges. Sign up for a free, unlimited API key at [BlockMarkets Cryptocurrency API](https://www.blockmarkets.io/cryptocurrency-api).

OpenAPI spec version: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'uri'

module blockmarkets
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns the latest available benchmark rates for a specific asset.
    # @param symbol The asset symbol (see /assets)
    # @param [Hash] opts the optional parameters
    # @return [Empty]
    def benchmark_rate(symbol, opts = {})
      data, _status_code, _headers = benchmark_rate_with_http_info(symbol, opts)
      data
    end

    # Returns the latest available benchmark rates for a specific asset.
    # @param symbol The asset symbol (see /assets)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def benchmark_rate_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.benchmark_rate ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.benchmark_rate"
      end
      # resource path
      local_var_path = '/v1/rates/benchmark/{symbol}'.sub('{' + 'symbol' + '}', symbol.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#benchmark_rate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns historical benchmark rates for an asset. Requires premium subscription.
    # @param symbol The asset symbol (see /assets)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :close The closing time. Options - 4pm-gmt-close, 4pm-est-close, 0-utc-close
    # @return [Empty]
    def benchmark_rate_history(symbol, opts = {})
      data, _status_code, _headers = benchmark_rate_history_with_http_info(symbol, opts)
      data
    end

    # Returns historical benchmark rates for an asset. Requires premium subscription.
    # @param symbol The asset symbol (see /assets)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :close The closing time. Options - 4pm-gmt-close, 4pm-est-close, 0-utc-close
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def benchmark_rate_history_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.benchmark_rate_history ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.benchmark_rate_history"
      end
      # resource path
      local_var_path = '/v1/rates/benchmark/{symbol}/history'.sub('{' + 'symbol' + '}', symbol.to_s)

      # query parameters
      query_params = {}
      query_params[:'close'] = opts[:'close'] if !opts[:'close'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#benchmark_rate_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of all markets (base and quote) for a specific asset.
    # @param symbol The asset symbol (see /assets)
    # @param [Hash] opts the optional parameters
    # @return [Empty]
    def list_asset_markets(symbol, opts = {})
      data, _status_code, _headers = list_asset_markets_with_http_info(symbol, opts)
      data
    end

    # Returns a list of all markets (base and quote) for a specific asset.
    # @param symbol The asset symbol (see /assets)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def list_asset_markets_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_asset_markets ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.list_asset_markets"
      end
      # resource path
      local_var_path = '/v1/assets/{symbol}'.sub('{' + 'symbol' + '}', symbol.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_asset_markets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of supported assets.
    # @param [Hash] opts the optional parameters
    # @return [Empty]
    def list_assets(opts = {})
      data, _status_code, _headers = list_assets_with_http_info(opts)
      data
    end

    # Returns a list of supported assets.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def list_assets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_assets ...'
      end
      # resource path
      local_var_path = '/v1/assets'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of supported USD benchmark rates.
    # @param [Hash] opts the optional parameters
    # @return [Empty]
    def list_benchmark_rates(opts = {})
      data, _status_code, _headers = list_benchmark_rates_with_http_info(opts)
      data
    end

    # Returns a list of supported USD benchmark rates.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def list_benchmark_rates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_benchmark_rates ...'
      end
      # resource path
      local_var_path = '/v1/rates/benchmark'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_benchmark_rates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of markets for a specific exchange.
    # @param exchange The 4-char exchange code (see /exchanges)
    # @param [Hash] opts the optional parameters
    # @return [Empty]
    def list_exchange_markets(exchange, opts = {})
      data, _status_code, _headers = list_exchange_markets_with_http_info(exchange, opts)
      data
    end

    # Returns a list of markets for a specific exchange.
    # @param exchange The 4-char exchange code (see /exchanges)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def list_exchange_markets_with_http_info(exchange, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_exchange_markets ...'
      end
      # verify the required parameter 'exchange' is set
      if @api_client.config.client_side_validation && exchange.nil?
        fail ArgumentError, "Missing the required parameter 'exchange' when calling DefaultApi.list_exchange_markets"
      end
      # resource path
      local_var_path = '/v1/exchanges/{exchange}'.sub('{' + 'exchange' + '}', exchange.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_exchange_markets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of supported exchanges.
    # @param [Hash] opts the optional parameters
    # @return [Empty]
    def list_exchanges(opts = {})
      data, _status_code, _headers = list_exchanges_with_http_info(opts)
      data
    end

    # Returns a list of supported exchanges.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def list_exchanges_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_exchanges ...'
      end
      # resource path
      local_var_path = '/v1/exchanges'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_exchanges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of supported markets.
    # @param [Hash] opts the optional parameters
    # @return [Empty]
    def list_markets(opts = {})
      data, _status_code, _headers = list_markets_with_http_info(opts)
      data
    end

    # Returns a list of supported markets.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def list_markets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_markets ...'
      end
      # resource path
      local_var_path = '/v1/markets'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_markets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of markets for a specific asset pair.
    # @param pair The asset pair (see /pairs)
    # @param [Hash] opts the optional parameters
    # @return [Empty]
    def list_pair_markets(pair, opts = {})
      data, _status_code, _headers = list_pair_markets_with_http_info(pair, opts)
      data
    end

    # Returns a list of markets for a specific asset pair.
    # @param pair The asset pair (see /pairs)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def list_pair_markets_with_http_info(pair, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_pair_markets ...'
      end
      # verify the required parameter 'pair' is set
      if @api_client.config.client_side_validation && pair.nil?
        fail ArgumentError, "Missing the required parameter 'pair' when calling DefaultApi.list_pair_markets"
      end
      # resource path
      local_var_path = '/v1/pairs/{pair}'.sub('{' + 'pair' + '}', pair.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_pair_markets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of supported asset pairs.
    # @param [Hash] opts the optional parameters
    # @return [Empty]
    def list_pairs(opts = {})
      data, _status_code, _headers = list_pairs_with_http_info(opts)
      data
    end

    # Returns a list of supported asset pairs.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def list_pairs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_pairs ...'
      end
      # resource path
      local_var_path = '/v1/pairs'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_pairs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of supported USD spot rates.
    # @param [Hash] opts the optional parameters
    # @return [Empty]
    def list_spot_rates(opts = {})
      data, _status_code, _headers = list_spot_rates_with_http_info(opts)
      data
    end

    # Returns a list of supported USD spot rates.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def list_spot_rates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_spot_rates ...'
      end
      # resource path
      local_var_path = '/v1/rates/spot'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_spot_rates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the top 50 bids and asks from the current order book for a market pair. Requires premium subscription.
    # @param exchange The 4-char exchange code (see /exchanges)
    # @param pair The asset pair (see /pairs)
    # @param [Hash] opts the optional parameters
    # @return [Empty]
    def market_book(exchange, pair, opts = {})
      data, _status_code, _headers = market_book_with_http_info(exchange, pair, opts)
      data
    end

    # Returns the top 50 bids and asks from the current order book for a market pair. Requires premium subscription.
    # @param exchange The 4-char exchange code (see /exchanges)
    # @param pair The asset pair (see /pairs)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def market_book_with_http_info(exchange, pair, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.market_book ...'
      end
      # verify the required parameter 'exchange' is set
      if @api_client.config.client_side_validation && exchange.nil?
        fail ArgumentError, "Missing the required parameter 'exchange' when calling DefaultApi.market_book"
      end
      # verify the required parameter 'pair' is set
      if @api_client.config.client_side_validation && pair.nil?
        fail ArgumentError, "Missing the required parameter 'pair' when calling DefaultApi.market_book"
      end
      # resource path
      local_var_path = '/v1/markets/{exchange}/{pair}/book'.sub('{' + 'exchange' + '}', exchange.to_s).sub('{' + 'pair' + '}', pair.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#market_book\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns OHLCV history for a market pair.
    # @param exchange The 4-char exchange code (see /exchanges)
    # @param pair The asset pair (see /pairs)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000)
    # @option opts [Integer] :interval Interval period in minutes. Supported - 1,3,5,15,30,60,1440 (default&#x3D;1440)
    # @option opts [String] :start Start datetime in ISO 8601
    # @option opts [String] :_end End datetime in ISO 8601
    # @return [Empty]
    def market_ohlcv(exchange, pair, opts = {})
      data, _status_code, _headers = market_ohlcv_with_http_info(exchange, pair, opts)
      data
    end

    # Returns OHLCV history for a market pair.
    # @param exchange The 4-char exchange code (see /exchanges)
    # @param pair The asset pair (see /pairs)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000)
    # @option opts [Integer] :interval Interval period in minutes. Supported - 1,3,5,15,30,60,1440 (default&#x3D;1440)
    # @option opts [String] :start Start datetime in ISO 8601
    # @option opts [String] :_end End datetime in ISO 8601
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def market_ohlcv_with_http_info(exchange, pair, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.market_ohlcv ...'
      end
      # verify the required parameter 'exchange' is set
      if @api_client.config.client_side_validation && exchange.nil?
        fail ArgumentError, "Missing the required parameter 'exchange' when calling DefaultApi.market_ohlcv"
      end
      # verify the required parameter 'pair' is set
      if @api_client.config.client_side_validation && pair.nil?
        fail ArgumentError, "Missing the required parameter 'pair' when calling DefaultApi.market_ohlcv"
      end
      # resource path
      local_var_path = '/v1/markets/{exchange}/{pair}/ohlcv'.sub('{' + 'exchange' + '}', exchange.to_s).sub('{' + 'pair' + '}', pair.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'interval'] = opts[:'interval'] if !opts[:'interval'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'end'] = opts[:'_end'] if !opts[:'_end'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#market_ohlcv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the latest ticker for a market pair.
    # @param exchange The 4-char exchange code (see /exchanges)
    # @param pair The asset pair (see /pairs)
    # @param [Hash] opts the optional parameters
    # @return [Empty]
    def market_ticker(exchange, pair, opts = {})
      data, _status_code, _headers = market_ticker_with_http_info(exchange, pair, opts)
      data
    end

    # Returns the latest ticker for a market pair.
    # @param exchange The 4-char exchange code (see /exchanges)
    # @param pair The asset pair (see /pairs)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def market_ticker_with_http_info(exchange, pair, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.market_ticker ...'
      end
      # verify the required parameter 'exchange' is set
      if @api_client.config.client_side_validation && exchange.nil?
        fail ArgumentError, "Missing the required parameter 'exchange' when calling DefaultApi.market_ticker"
      end
      # verify the required parameter 'pair' is set
      if @api_client.config.client_side_validation && pair.nil?
        fail ArgumentError, "Missing the required parameter 'pair' when calling DefaultApi.market_ticker"
      end
      # resource path
      local_var_path = '/v1/markets/{exchange}/{pair}'.sub('{' + 'exchange' + '}', exchange.to_s).sub('{' + 'pair' + '}', pair.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#market_ticker\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns trades for a market pair. Requires premium subscription.
    # @param exchange The 4-char exchange code (see /exchanges)
    # @param pair The asset pair (see /pairs)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000)
    # @option opts [String] :start Start datetime in ISO 8601
    # @option opts [String] :_end End datetime in ISO 8601
    # @return [Empty]
    def market_trades(exchange, pair, opts = {})
      data, _status_code, _headers = market_trades_with_http_info(exchange, pair, opts)
      data
    end

    # Returns trades for a market pair. Requires premium subscription.
    # @param exchange The 4-char exchange code (see /exchanges)
    # @param pair The asset pair (see /pairs)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000)
    # @option opts [String] :start Start datetime in ISO 8601
    # @option opts [String] :_end End datetime in ISO 8601
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def market_trades_with_http_info(exchange, pair, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.market_trades ...'
      end
      # verify the required parameter 'exchange' is set
      if @api_client.config.client_side_validation && exchange.nil?
        fail ArgumentError, "Missing the required parameter 'exchange' when calling DefaultApi.market_trades"
      end
      # verify the required parameter 'pair' is set
      if @api_client.config.client_side_validation && pair.nil?
        fail ArgumentError, "Missing the required parameter 'pair' when calling DefaultApi.market_trades"
      end
      # resource path
      local_var_path = '/v1/markets/{exchange}/{pair}/trades'.sub('{' + 'exchange' + '}', exchange.to_s).sub('{' + 'pair' + '}', pair.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'end'] = opts[:'_end'] if !opts[:'_end'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#market_trades\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the last USD spot rate for an asset.
    # @param symbol The asset symbol (see /assets)
    # @param [Hash] opts the optional parameters
    # @return [Empty]
    def spot_rate(symbol, opts = {})
      data, _status_code, _headers = spot_rate_with_http_info(symbol, opts)
      data
    end

    # Returns the last USD spot rate for an asset.
    # @param symbol The asset symbol (see /assets)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def spot_rate_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.spot_rate ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.spot_rate"
      end
      # resource path
      local_var_path = '/v1/rates/spot/{symbol}'.sub('{' + 'symbol' + '}', symbol.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#spot_rate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns historical spot rates for an asset. Requires premium subscription.
    # @param symbol The asset symbol (see /assets)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000)
    # @option opts [String] :start Start datetime in ISO 8601
    # @option opts [String] :_end End datetime in ISO 8601
    # @return [Empty]
    def spot_rate_history(symbol, opts = {})
      data, _status_code, _headers = spot_rate_history_with_http_info(symbol, opts)
      data
    end

    # Returns historical spot rates for an asset. Requires premium subscription.
    # @param symbol The asset symbol (see /assets)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000)
    # @option opts [String] :start Start datetime in ISO 8601
    # @option opts [String] :_end End datetime in ISO 8601
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def spot_rate_history_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.spot_rate_history ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.spot_rate_history"
      end
      # resource path
      local_var_path = '/v1/rates/spot/{symbol}/history'.sub('{' + 'symbol' + '}', symbol.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'end'] = opts[:'_end'] if !opts[:'_end'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#spot_rate_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns the OHLCV history for a spot rate.
    # @param symbol The asset symbol (see /assets)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000)
    # @option opts [Integer] :interval Interval period in minutes. Supported -  1,3,5,15,30,60,1440 (default&#x3D;1440)
    # @option opts [String] :start Start datetime in ISO 8601
    # @option opts [String] :_end End datetime in ISO 8601
    # @return [Empty]
    def spot_rate_ohlcv(symbol, opts = {})
      data, _status_code, _headers = spot_rate_ohlcv_with_http_info(symbol, opts)
      data
    end

    # Returns the OHLCV history for a spot rate.
    # @param symbol The asset symbol (see /assets)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of records to retrieve (default&#x3D;100, max&#x3D;1000)
    # @option opts [Integer] :interval Interval period in minutes. Supported -  1,3,5,15,30,60,1440 (default&#x3D;1440)
    # @option opts [String] :start Start datetime in ISO 8601
    # @option opts [String] :_end End datetime in ISO 8601
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def spot_rate_ohlcv_with_http_info(symbol, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.spot_rate_ohlcv ...'
      end
      # verify the required parameter 'symbol' is set
      if @api_client.config.client_side_validation && symbol.nil?
        fail ArgumentError, "Missing the required parameter 'symbol' when calling DefaultApi.spot_rate_ohlcv"
      end
      # resource path
      local_var_path = '/v1/rates/spot/{symbol}/ohlcv'.sub('{' + 'symbol' + '}', symbol.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'interval'] = opts[:'interval'] if !opts[:'interval'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'end'] = opts[:'_end'] if !opts[:'_end'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api_key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#spot_rate_ohlcv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
